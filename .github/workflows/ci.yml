# This workflow analyzes the Osprey MATLAB repository using Octave for static code analysis

name: MATLAB Code Scanning

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events for the develop branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  analyze:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Install Octave
      - name: Install Octave
        run: sudo apt-get install -y octave

      # Run static code analysis using a custom Octave script
      - name: Run Code Analysis
        run: |
          echo "addpath('code'); files = dir('code/**/*.m'); results = {}; for k = 1:length(files), filePath = fullfile(files(k).folder, files(k).name); fid = fopen(filePath, 'r'); code = fread(fid, '*char')'; fclose(fid); issues = codeAnalysis(code); if ~isempty(issues), results{end+1} = {filePath, issues}; end; end; save('code-analysis-results.mat', 'results');" > analyze_code.m
          octave --no-gui analyze_code.m

      # Convert results to a human-readable format
      - name: Convert Results to Text
        run: |
          octave --no-gui --eval "load('code-analysis-results.mat'); fid = fopen('code-analysis-results.txt', 'w'); for i = 1:length(results), fprintf(fid, 'File: %s\n', results{i}{1}); fprintf(fid, '%s\n', results{i}{2}{:}); end; fclose(fid);"

      # Upload code analysis results to GitHub
      - name: Upload analysis results
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-results
          path: code-analysis-results.txt
